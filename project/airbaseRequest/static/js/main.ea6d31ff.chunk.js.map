{"version":3,"sources":["App/image/Airbase_Logo.svg","App/image/lock.svg","App/image/file.svg","App/image/check.svg","App/image/unCheck.svg","App/fonts/FontsFree-Net-SFProDisplay-Regular.ttf","App/components/Logo.js","App/components/SecurityMessage.js","App/components/Title.js","App/components/ActionButtons.js","App/components/RequestView.js","App/utils/helpers.js","App/components/Member.js","App/components/MemberView.js","App/index.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","src","Airbase_Logo","className","alt","Component","SecurityMessage","Lock","Title","this","props","name","logo","id","ActionButtons","RequestView","requestedByImage","requestedByName","cost","renewalFrequency","annualCost","expenseAccount","file","description","map","value","index","key","FileIcon","href","target","split","length","formatDate","getDate","currDate","Date","currMonth","getMonth","allMonth","monthString","reDt","getFullYear","getMembers","memArr","approved","filteredMembers","filter","mem","status","console","log","srNum","obj","Member","memberData","approver","last_updated_date","first_name","last_name","profile_picture","email","Check","UnCheck","MemberView","pending","App","customData","service","requested_by","renewal_frequency_in_months","spend_limit_window","expense_account","files","approvers","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea6d31ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Airbase_Logo.6caeb41a.svg\";","module.exports = __webpack_public_path__ + \"static/media/lock.370e89ba.svg\";","module.exports = __webpack_public_path__ + \"static/media/file.c95f57b2.svg\";","module.exports = __webpack_public_path__ + \"static/media/check.c722dbbc.svg\";","module.exports = __webpack_public_path__ + \"static/media/unCheck.7aa3516f.svg\";","module.exports = __webpack_public_path__ + \"static/media/FontsFree-Net-SFProDisplay-Regular.d09549c1.ttf\";","import React, { Component } from \"react\";\nimport Airbase_Logo from \"../image/Airbase_Logo.svg\";\n\nclass Logo extends Component {\n  render() {\n    return <img src={Airbase_Logo} className=\"App-logo\" alt=\"Airbase_Logo\" />;\n  }\n}\n\nexport default Logo;","import React, { Component } from \"react\";\nimport Lock from \"../image/lock.svg\";\n\nclass SecurityMessage extends Component {\n  render() {\n    return(\n        <div className=\"infoDiv\">\n            <p className=\"infoHead1\"><img src={Lock} className=\"Lock-img\" alt=\"Airbase_Lock\" />Security Message</p>\n            <p className=\"infoText1\">Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus.</p>\n        </div>\n    );\n  }\n}\n\nexport default SecurityMessage;","import React, { Component } from \"react\";\n\nclass Title extends Component {\n  render() {\n    const { name, logo, id } = this.props;\n    return (\n      <div className=\"titleDiv\">\n        <img src={logo} className=\"service-logo\" alt=\"service_Logo\" />\n        <span className=\"titleStyle\">\n          Request for {name} (#{id})\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Title;\n","import React, { Component } from \"react\";\n\nclass ActionButtons extends Component {\n  render() {\n    return (\n      <div className=\"buttonGroup\">\n        <div className=\"actionButton approveButton\">\n          <p>Approve</p>\n        </div>\n        <div className=\"actionButton denyButton\">\n          <p>Deny</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ActionButtons;\n","import React, { Component } from \"react\";\nimport FileIcon from \"../image/file.svg\";\nimport ActionButtons from \"./ActionButtons\";\n\nclass RequestView extends Component {\n  render() {\n    const {\n      requestedByImage,\n      requestedByName,\n      cost,\n      renewalFrequency,\n      annualCost,\n      expenseAccount,\n      file,\n      description\n    } = this.props;\n    return (\n      <div className=\"requestDiv\">\n        <div className=\"requestDivContent requestDivMargin\">\n          <div className=\"contentInfoView\">\n            <div className=\"contentKeyDiv\">\n              <span className=\"contentKeyText\">Requested by</span>\n            </div>\n            <div className=\"contentValDiv\">\n              <img\n                src={requestedByImage}\n                className=\"request_avatar\"\n                alt=\"request_avatar\"\n              />\n              <span className=\"contentValText\">{requestedByName}</span>\n            </div>\n          </div>\n\n          <div className=\"contentInfoView topBorder\">\n            <div className=\"contentKeyDiv\">\n              <span className=\"contentKeyText\">Cost</span>\n            </div>\n            <div className=\"contentValDiv\">\n              <span className=\"contentValText\">${cost}</span>\n            </div>\n          </div>\n\n          <div className=\"contentInfoView2 topBorder contentInfoView2BorderRight\">\n            <div className=\"contentKeyDiv2\">\n              <span className=\"contentKeyText\">Renewal Frequency</span>\n            </div>\n            <div className=\"contentValDiv\">\n              <span className=\"contentValText\">{renewalFrequency}</span>\n            </div>\n          </div>\n\n          <div className=\"contentInfoView2 topBorder\">\n            <div className=\"contentKeyDiv\">\n              <span className=\"contentKeyText\">Annual Cost</span>\n            </div>\n            <div className=\"contentValDiv\">\n              <span className=\"contentValText\">${annualCost}</span>\n            </div>\n          </div>\n\n          <div className=\"contentInfoView topBorder\">\n            <div className=\"contentKeyDiv\">\n              <span className=\"contentKeyText\">Expense Account</span>\n            </div>\n            <div className=\"contentValDiv\">\n              <span className=\"contentValText\">{expenseAccount}</span>\n            </div>\n          </div>\n\n          <div className=\"contentInfoView topBorder\">\n            <div className=\"contentKeyDiv\">\n              <span className=\"contentKeyText\">File</span>\n            </div>\n            <div className=\"contentValDiv\">\n              {file.map((value, index) => {\n                return (\n                  <div key={index}>\n                    <img src={FileIcon} className=\"fileIcon\" alt=\"File_Icon\" />\n                    <a href={value} target=\"blank\" className=\"contentValText\">\n                      {value.split(\"/\")[value.split(\"/\").length - 1]}\n                    </a>\n                    <br />\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          <div className=\"contentInfoView contentInfoView3 topBorder\">\n            <div className=\"contentKeyDiv\">\n              <span className=\"contentKeyText\">Description</span>\n            </div>\n            <div className=\"contentValDiv3\">\n              <span className=\"contentValText\">{description}</span>\n            </div>\n          </div>\n        </div>\n        <div className=\"alertText\">\n          <span>\n            Your company is already paying for Amazon Web Service on a recurring\n            basis.\n          </span>\n          <br />\n          <span className=\"defaultColor\">\n            (1 instance owned by John Smith).\n          </span>\n        </div>\n        <div className=\"webActionButtons\">\n          <ActionButtons />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RequestView;\n","export const formatDate = (getDate = \"\") => {\n  if (getDate) {\n    let currDate = new Date(getDate);\n    \n    let currMonth = currDate.getMonth();\n    let allMonth = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    let monthString = allMonth[currMonth];\n\n    let reDt = monthString + \" \" + currDate.getDate() + \", \" + currDate.getFullYear();\n    return reDt;\n  }\n  return \"\";\n};\n\nexport const getMembers = (memArr, approved) => {\n  let filteredMembers =  memArr.filter(function(mem) {\n    return approved ? mem.status === \"accepted\" : mem.status !== \"accepted\";\n  });\n  console.log('memArr.length: ',memArr.length)\n  console.log('filteredMembers.length: ',filteredMembers.length)\n  let srNum = approved ? 1 : (memArr.length - filteredMembers.length + 1) ;\n  console.log('srNum: ',srNum)\n\n  filteredMembers = filteredMembers.map(obj =>{ \n    obj['srNum'] = srNum++;\n    return obj;\n })\n  return filteredMembers;\n};","import React, { Component } from \"react\";\nimport Check from \"../image/check.svg\";\nimport UnCheck from \"../image/unCheck.svg\";\nimport { formatDate } from \"../utils/helpers\";\n\nclass Member extends Component {\n  render() {\n    const { memberData } = this.props;\n    const { approver, last_updated_date, status, srNum } = memberData;\n    const { first_name, last_name, profile_picture, email } = approver;\n    return (\n      <div className=\"memberView\">\n        <div className=\"memberCountView\">\n          <div className=\"memberCount\">\n            <p className=\"memberCountText\">{srNum}</p>\n          </div>\n        </div>\n        <div className=\"memberDetails\">\n          <div className=\"memberAvatarHolder\">\n            <img\n              src={profile_picture}\n              className=\"member_avatar\"\n              alt=\"member_avatar\"\n            />\n          </div>\n          <div className=\"memberDetailsHolder\">\n            <p className=\"memberDetailP\">\n              <span className=\"memberName\">\n                {first_name + \" \" + last_name + \" \"}\n              </span>\n              <span className=\"memberInfo\">({email})</span>\n            </p>\n            {status === \"accepted\" ? (\n              <span className=\"memberInfo\">\n                Approved {formatDate(last_updated_date)}\n              </span>\n            ) : (\n              <span className=\"memberInfo\">\n                Last Notified {formatDate(last_updated_date)}\n              </span>\n            )}\n          </div>\n        </div>\n        <div className=\"memberCheck\">\n          {status === \"accepted\" ? (\n            <img src={Check} className=\"Check-logo\" alt=\"Check_Logo\" />\n          ) : (\n            <img src={UnCheck} className=\"Check-logo\" alt=\"Check_Logo\" />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Member;\n","import React, { Component } from \"react\";\nimport Member from \"./Member\";\n\nclass MemberView extends Component {\n  render() {\n    const { approved, pending } = this.props;\n    return (\n      <div className=\"memberDiv\">\n        {approved.length && (\n          <div className=\"memberSection\">\n            <p className=\"memberDivTitle\">Approved</p>\n            <div className=\"membersList\">\n              {approved.map((value, index) => {\n                return <Member key={index} memberData={value} />;\n              })}\n            </div>\n          </div>\n        )}\n        <hr className=\"membersHr\" />\n        {pending.length && (\n          <div className=\"memberSection\">\n            <p className=\"memberDivTitle\">Pending</p>\n            <div className=\"membersList\">\n              {pending.map((value, index) => {\n                return <Member key={index} memberData={value} />;\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default MemberView;\n","import React, { Component } from \"react\";\nimport AirbaseLogo from \"./components/Logo\";\nimport SecurityMessage from \"./components/SecurityMessage\";\nimport Title from \"./components/Title\";\nimport RequestView from \"./components/RequestView\"\nimport MemberView from \"./components/MemberView\"\nimport ActionButtons from \"./components/ActionButtons\"\nimport \"./css/App.css\";\nimport customData from \"./data.json\";\nimport { getMembers } from \"./utils/helpers\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AirbaseLogo />\n        <SecurityMessage />\n        <div className=\"MainDiv\">\n          <Title \n            name={customData.service.name}\n            logo={customData.service.logo}\n            id={customData.id}\n          />\n          <div className=\"ContentDiv\">\n            <RequestView\n              requestedByImage = {customData.requested_by.profile_picture}\n              requestedByName = {customData.requested_by.first_name + \" \" + customData.requested_by.last_name}\n              cost = {customData.cost}\n              renewalFrequency = {customData.renewal_frequency_in_months + \" \" + customData.spend_limit_window}\n              annualCost = {customData.cost * 12}\n              expenseAccount = {customData.expense_account}\n              file = {customData.files}\n              description = {customData.description}\n            />\n            <MemberView\n              approved = {getMembers(customData.approvers, true)}\n              pending = {getMembers(customData.approvers, false)}\n            />\n          </div>\n        </div>\n        <div className=\"mobileActionButtons\"><ActionButtons/></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App/fonts/FontsFree-Net-SFProDisplay-Regular.ttf'\nimport './App/css/index.css';\nimport App from './App/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}